-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Lambda/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pTerm -> Term                               (0)
	%start_pType -> Type                               (1)
	Var -> L_Var                                       (2)
	Term -> Var                                        (3)
	Term -> '(' Term Term ')'                          (4)
	Term -> '\\' Var ':' Type '.' Term                 (5)
	Term -> 'fst' Term                                 (6)
	Term -> 'snd' Term                                 (7)
	Term -> 'inl' Term 'as' Type                       (8)
	Term -> 'inr' Term 'as' Type                       (9)
	Term -> 'case' Term 'of' Term '|' Term             (10)
	Term -> 'abort' Type Term                          (11)
	Type -> 'A'                                        (12)
	Type -> 'B'                                        (13)
	Type -> 'C'                                        (14)
	Type -> 'T'                                        (15)
	Type -> 'E'                                        (16)
	Type -> 'Bot'                                      (17)
	Type -> '(' Type '->' Type ')'                     (18)
	Type -> '(' Type '+' Type ')'                      (19)
	Type -> '(' Type '*' Type ')'                      (20)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	'->'           { PT _ (TS _ 5) }
	'.'            { PT _ (TS _ 6) }
	':'            { PT _ (TS _ 7) }
	'A'            { PT _ (TS _ 8) }
	'B'            { PT _ (TS _ 9) }
	'Bot'          { PT _ (TS _ 10) }
	'C'            { PT _ (TS _ 11) }
	'E'            { PT _ (TS _ 12) }
	'T'            { PT _ (TS _ 13) }
	'\\'           { PT _ (TS _ 14) }
	'abort'        { PT _ (TS _ 15) }
	'as'           { PT _ (TS _ 16) }
	'case'         { PT _ (TS _ 17) }
	'fst'          { PT _ (TS _ 18) }
	'inl'          { PT _ (TS _ 19) }
	'inr'          { PT _ (TS _ 20) }
	'of'           { PT _ (TS _ 21) }
	'snd'          { PT _ (TS _ 22) }
	'|'            { PT _ (TS _ 23) }
	L_Var          { PT _ (T_Var $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pTerm    rule  0
	%start_pType    rule  1
	Var             rule  2
	Term            rules 3, 4, 5, 6, 7, 8, 9, 10, 11
	Type            rules 12, 13, 14, 15, 16, 17, 18, 19, 20

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pTerm -> . Term                              (rule 0)

	'('            shift, and enter state 14
	'\\'           shift, and enter state 15
	'abort'        shift, and enter state 16
	'case'         shift, and enter state 17
	'fst'          shift, and enter state 18
	'inl'          shift, and enter state 19
	'inr'          shift, and enter state 20
	'snd'          shift, and enter state 21
	L_Var          shift, and enter state 3

	Var            goto state 12
	Term           goto state 13

State 1

	%start_pType -> . Type                              (rule 1)

	'('            shift, and enter state 5
	'A'            shift, and enter state 6
	'B'            shift, and enter state 7
	'Bot'          shift, and enter state 8
	'C'            shift, and enter state 9
	'E'            shift, and enter state 10
	'T'            shift, and enter state 11

	Type           goto state 4

State 2

	Var -> . L_Var                                      (rule 2)

	L_Var          shift, and enter state 3


State 3

	Var -> L_Var .                                      (rule 2)

	'('            reduce using rule 2
	')'            reduce using rule 2
	':'            reduce using rule 2
	'\\'           reduce using rule 2
	'abort'        reduce using rule 2
	'as'           reduce using rule 2
	'case'         reduce using rule 2
	'fst'          reduce using rule 2
	'inl'          reduce using rule 2
	'inr'          reduce using rule 2
	'of'           reduce using rule 2
	'snd'          reduce using rule 2
	'|'            reduce using rule 2
	L_Var          reduce using rule 2
	%eof           reduce using rule 2


State 4

	%start_pType -> Type .                              (rule 1)

	%eof           accept


State 5

	Type -> '(' . Type '->' Type ')'                    (rule 18)
	Type -> '(' . Type '+' Type ')'                     (rule 19)
	Type -> '(' . Type '*' Type ')'                     (rule 20)

	'('            shift, and enter state 5
	'A'            shift, and enter state 6
	'B'            shift, and enter state 7
	'Bot'          shift, and enter state 8
	'C'            shift, and enter state 9
	'E'            shift, and enter state 10
	'T'            shift, and enter state 11

	Type           goto state 30

State 6

	Type -> 'A' .                                       (rule 12)

	'('            reduce using rule 12
	')'            reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	'->'           reduce using rule 12
	'.'            reduce using rule 12
	'\\'           reduce using rule 12
	'abort'        reduce using rule 12
	'as'           reduce using rule 12
	'case'         reduce using rule 12
	'fst'          reduce using rule 12
	'inl'          reduce using rule 12
	'inr'          reduce using rule 12
	'of'           reduce using rule 12
	'snd'          reduce using rule 12
	'|'            reduce using rule 12
	L_Var          reduce using rule 12
	%eof           reduce using rule 12


State 7

	Type -> 'B' .                                       (rule 13)

	'('            reduce using rule 13
	')'            reduce using rule 13
	'*'            reduce using rule 13
	'+'            reduce using rule 13
	'->'           reduce using rule 13
	'.'            reduce using rule 13
	'\\'           reduce using rule 13
	'abort'        reduce using rule 13
	'as'           reduce using rule 13
	'case'         reduce using rule 13
	'fst'          reduce using rule 13
	'inl'          reduce using rule 13
	'inr'          reduce using rule 13
	'of'           reduce using rule 13
	'snd'          reduce using rule 13
	'|'            reduce using rule 13
	L_Var          reduce using rule 13
	%eof           reduce using rule 13


State 8

	Type -> 'Bot' .                                     (rule 17)

	'('            reduce using rule 17
	')'            reduce using rule 17
	'*'            reduce using rule 17
	'+'            reduce using rule 17
	'->'           reduce using rule 17
	'.'            reduce using rule 17
	'\\'           reduce using rule 17
	'abort'        reduce using rule 17
	'as'           reduce using rule 17
	'case'         reduce using rule 17
	'fst'          reduce using rule 17
	'inl'          reduce using rule 17
	'inr'          reduce using rule 17
	'of'           reduce using rule 17
	'snd'          reduce using rule 17
	'|'            reduce using rule 17
	L_Var          reduce using rule 17
	%eof           reduce using rule 17


State 9

	Type -> 'C' .                                       (rule 14)

	'('            reduce using rule 14
	')'            reduce using rule 14
	'*'            reduce using rule 14
	'+'            reduce using rule 14
	'->'           reduce using rule 14
	'.'            reduce using rule 14
	'\\'           reduce using rule 14
	'abort'        reduce using rule 14
	'as'           reduce using rule 14
	'case'         reduce using rule 14
	'fst'          reduce using rule 14
	'inl'          reduce using rule 14
	'inr'          reduce using rule 14
	'of'           reduce using rule 14
	'snd'          reduce using rule 14
	'|'            reduce using rule 14
	L_Var          reduce using rule 14
	%eof           reduce using rule 14


State 10

	Type -> 'E' .                                       (rule 16)

	'('            reduce using rule 16
	')'            reduce using rule 16
	'*'            reduce using rule 16
	'+'            reduce using rule 16
	'->'           reduce using rule 16
	'.'            reduce using rule 16
	'\\'           reduce using rule 16
	'abort'        reduce using rule 16
	'as'           reduce using rule 16
	'case'         reduce using rule 16
	'fst'          reduce using rule 16
	'inl'          reduce using rule 16
	'inr'          reduce using rule 16
	'of'           reduce using rule 16
	'snd'          reduce using rule 16
	'|'            reduce using rule 16
	L_Var          reduce using rule 16
	%eof           reduce using rule 16


State 11

	Type -> 'T' .                                       (rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15
	'*'            reduce using rule 15
	'+'            reduce using rule 15
	'->'           reduce using rule 15
	'.'            reduce using rule 15
	'\\'           reduce using rule 15
	'abort'        reduce using rule 15
	'as'           reduce using rule 15
	'case'         reduce using rule 15
	'fst'          reduce using rule 15
	'inl'          reduce using rule 15
	'inr'          reduce using rule 15
	'of'           reduce using rule 15
	'snd'          reduce using rule 15
	'|'            reduce using rule 15
	L_Var          reduce using rule 15
	%eof           reduce using rule 15


State 12

	Term -> Var .                                       (rule 3)

	'('            reduce using rule 3
	')'            reduce using rule 3
	'\\'           reduce using rule 3
	'abort'        reduce using rule 3
	'as'           reduce using rule 3
	'case'         reduce using rule 3
	'fst'          reduce using rule 3
	'inl'          reduce using rule 3
	'inr'          reduce using rule 3
	'of'           reduce using rule 3
	'snd'          reduce using rule 3
	'|'            reduce using rule 3
	L_Var          reduce using rule 3
	%eof           reduce using rule 3


State 13

	%start_pTerm -> Term .                              (rule 0)

	%eof           accept


State 14

	Term -> '(' . Term Term ')'                         (rule 4)

	'('            shift, and enter state 14
	'\\'           shift, and enter state 15
	'abort'        shift, and enter state 16
	'case'         shift, and enter state 17
	'fst'          shift, and enter state 18
	'inl'          shift, and enter state 19
	'inr'          shift, and enter state 20
	'snd'          shift, and enter state 21
	L_Var          shift, and enter state 3

	Var            goto state 12
	Term           goto state 29

State 15

	Term -> '\\' . Var ':' Type '.' Term                (rule 5)

	L_Var          shift, and enter state 3

	Var            goto state 28

State 16

	Term -> 'abort' . Type Term                         (rule 11)

	'('            shift, and enter state 5
	'A'            shift, and enter state 6
	'B'            shift, and enter state 7
	'Bot'          shift, and enter state 8
	'C'            shift, and enter state 9
	'E'            shift, and enter state 10
	'T'            shift, and enter state 11

	Type           goto state 27

State 17

	Term -> 'case' . Term 'of' Term '|' Term            (rule 10)

	'('            shift, and enter state 14
	'\\'           shift, and enter state 15
	'abort'        shift, and enter state 16
	'case'         shift, and enter state 17
	'fst'          shift, and enter state 18
	'inl'          shift, and enter state 19
	'inr'          shift, and enter state 20
	'snd'          shift, and enter state 21
	L_Var          shift, and enter state 3

	Var            goto state 12
	Term           goto state 26

State 18

	Term -> 'fst' . Term                                (rule 6)

	'('            shift, and enter state 14
	'\\'           shift, and enter state 15
	'abort'        shift, and enter state 16
	'case'         shift, and enter state 17
	'fst'          shift, and enter state 18
	'inl'          shift, and enter state 19
	'inr'          shift, and enter state 20
	'snd'          shift, and enter state 21
	L_Var          shift, and enter state 3

	Var            goto state 12
	Term           goto state 25

State 19

	Term -> 'inl' . Term 'as' Type                      (rule 8)

	'('            shift, and enter state 14
	'\\'           shift, and enter state 15
	'abort'        shift, and enter state 16
	'case'         shift, and enter state 17
	'fst'          shift, and enter state 18
	'inl'          shift, and enter state 19
	'inr'          shift, and enter state 20
	'snd'          shift, and enter state 21
	L_Var          shift, and enter state 3

	Var            goto state 12
	Term           goto state 24

State 20

	Term -> 'inr' . Term 'as' Type                      (rule 9)

	'('            shift, and enter state 14
	'\\'           shift, and enter state 15
	'abort'        shift, and enter state 16
	'case'         shift, and enter state 17
	'fst'          shift, and enter state 18
	'inl'          shift, and enter state 19
	'inr'          shift, and enter state 20
	'snd'          shift, and enter state 21
	L_Var          shift, and enter state 3

	Var            goto state 12
	Term           goto state 23

State 21

	Term -> 'snd' . Term                                (rule 7)

	'('            shift, and enter state 14
	'\\'           shift, and enter state 15
	'abort'        shift, and enter state 16
	'case'         shift, and enter state 17
	'fst'          shift, and enter state 18
	'inl'          shift, and enter state 19
	'inr'          shift, and enter state 20
	'snd'          shift, and enter state 21
	L_Var          shift, and enter state 3

	Var            goto state 12
	Term           goto state 22

State 22

	Term -> 'snd' Term .                                (rule 7)

	'('            reduce using rule 7
	')'            reduce using rule 7
	'\\'           reduce using rule 7
	'abort'        reduce using rule 7
	'as'           reduce using rule 7
	'case'         reduce using rule 7
	'fst'          reduce using rule 7
	'inl'          reduce using rule 7
	'inr'          reduce using rule 7
	'of'           reduce using rule 7
	'snd'          reduce using rule 7
	'|'            reduce using rule 7
	L_Var          reduce using rule 7
	%eof           reduce using rule 7


State 23

	Term -> 'inr' Term . 'as' Type                      (rule 9)

	'as'           shift, and enter state 39


State 24

	Term -> 'inl' Term . 'as' Type                      (rule 8)

	'as'           shift, and enter state 38


State 25

	Term -> 'fst' Term .                                (rule 6)

	'('            reduce using rule 6
	')'            reduce using rule 6
	'\\'           reduce using rule 6
	'abort'        reduce using rule 6
	'as'           reduce using rule 6
	'case'         reduce using rule 6
	'fst'          reduce using rule 6
	'inl'          reduce using rule 6
	'inr'          reduce using rule 6
	'of'           reduce using rule 6
	'snd'          reduce using rule 6
	'|'            reduce using rule 6
	L_Var          reduce using rule 6
	%eof           reduce using rule 6


State 26

	Term -> 'case' Term . 'of' Term '|' Term            (rule 10)

	'of'           shift, and enter state 37


State 27

	Term -> 'abort' Type . Term                         (rule 11)

	'('            shift, and enter state 14
	'\\'           shift, and enter state 15
	'abort'        shift, and enter state 16
	'case'         shift, and enter state 17
	'fst'          shift, and enter state 18
	'inl'          shift, and enter state 19
	'inr'          shift, and enter state 20
	'snd'          shift, and enter state 21
	L_Var          shift, and enter state 3

	Var            goto state 12
	Term           goto state 36

State 28

	Term -> '\\' Var . ':' Type '.' Term                (rule 5)

	':'            shift, and enter state 35


State 29

	Term -> '(' Term . Term ')'                         (rule 4)

	'('            shift, and enter state 14
	'\\'           shift, and enter state 15
	'abort'        shift, and enter state 16
	'case'         shift, and enter state 17
	'fst'          shift, and enter state 18
	'inl'          shift, and enter state 19
	'inr'          shift, and enter state 20
	'snd'          shift, and enter state 21
	L_Var          shift, and enter state 3

	Var            goto state 12
	Term           goto state 34

State 30

	Type -> '(' Type . '->' Type ')'                    (rule 18)
	Type -> '(' Type . '+' Type ')'                     (rule 19)
	Type -> '(' Type . '*' Type ')'                     (rule 20)

	'*'            shift, and enter state 31
	'+'            shift, and enter state 32
	'->'           shift, and enter state 33


State 31

	Type -> '(' Type '*' . Type ')'                     (rule 20)

	'('            shift, and enter state 5
	'A'            shift, and enter state 6
	'B'            shift, and enter state 7
	'Bot'          shift, and enter state 8
	'C'            shift, and enter state 9
	'E'            shift, and enter state 10
	'T'            shift, and enter state 11

	Type           goto state 47

State 32

	Type -> '(' Type '+' . Type ')'                     (rule 19)

	'('            shift, and enter state 5
	'A'            shift, and enter state 6
	'B'            shift, and enter state 7
	'Bot'          shift, and enter state 8
	'C'            shift, and enter state 9
	'E'            shift, and enter state 10
	'T'            shift, and enter state 11

	Type           goto state 46

State 33

	Type -> '(' Type '->' . Type ')'                    (rule 18)

	'('            shift, and enter state 5
	'A'            shift, and enter state 6
	'B'            shift, and enter state 7
	'Bot'          shift, and enter state 8
	'C'            shift, and enter state 9
	'E'            shift, and enter state 10
	'T'            shift, and enter state 11

	Type           goto state 45

State 34

	Term -> '(' Term Term . ')'                         (rule 4)

	')'            shift, and enter state 44


State 35

	Term -> '\\' Var ':' . Type '.' Term                (rule 5)

	'('            shift, and enter state 5
	'A'            shift, and enter state 6
	'B'            shift, and enter state 7
	'Bot'          shift, and enter state 8
	'C'            shift, and enter state 9
	'E'            shift, and enter state 10
	'T'            shift, and enter state 11

	Type           goto state 43

State 36

	Term -> 'abort' Type Term .                         (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11
	'\\'           reduce using rule 11
	'abort'        reduce using rule 11
	'as'           reduce using rule 11
	'case'         reduce using rule 11
	'fst'          reduce using rule 11
	'inl'          reduce using rule 11
	'inr'          reduce using rule 11
	'of'           reduce using rule 11
	'snd'          reduce using rule 11
	'|'            reduce using rule 11
	L_Var          reduce using rule 11
	%eof           reduce using rule 11


State 37

	Term -> 'case' Term 'of' . Term '|' Term            (rule 10)

	'('            shift, and enter state 14
	'\\'           shift, and enter state 15
	'abort'        shift, and enter state 16
	'case'         shift, and enter state 17
	'fst'          shift, and enter state 18
	'inl'          shift, and enter state 19
	'inr'          shift, and enter state 20
	'snd'          shift, and enter state 21
	L_Var          shift, and enter state 3

	Var            goto state 12
	Term           goto state 42

State 38

	Term -> 'inl' Term 'as' . Type                      (rule 8)

	'('            shift, and enter state 5
	'A'            shift, and enter state 6
	'B'            shift, and enter state 7
	'Bot'          shift, and enter state 8
	'C'            shift, and enter state 9
	'E'            shift, and enter state 10
	'T'            shift, and enter state 11

	Type           goto state 41

State 39

	Term -> 'inr' Term 'as' . Type                      (rule 9)

	'('            shift, and enter state 5
	'A'            shift, and enter state 6
	'B'            shift, and enter state 7
	'Bot'          shift, and enter state 8
	'C'            shift, and enter state 9
	'E'            shift, and enter state 10
	'T'            shift, and enter state 11

	Type           goto state 40

State 40

	Term -> 'inr' Term 'as' Type .                      (rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	'\\'           reduce using rule 9
	'abort'        reduce using rule 9
	'as'           reduce using rule 9
	'case'         reduce using rule 9
	'fst'          reduce using rule 9
	'inl'          reduce using rule 9
	'inr'          reduce using rule 9
	'of'           reduce using rule 9
	'snd'          reduce using rule 9
	'|'            reduce using rule 9
	L_Var          reduce using rule 9
	%eof           reduce using rule 9


State 41

	Term -> 'inl' Term 'as' Type .                      (rule 8)

	'('            reduce using rule 8
	')'            reduce using rule 8
	'\\'           reduce using rule 8
	'abort'        reduce using rule 8
	'as'           reduce using rule 8
	'case'         reduce using rule 8
	'fst'          reduce using rule 8
	'inl'          reduce using rule 8
	'inr'          reduce using rule 8
	'of'           reduce using rule 8
	'snd'          reduce using rule 8
	'|'            reduce using rule 8
	L_Var          reduce using rule 8
	%eof           reduce using rule 8


State 42

	Term -> 'case' Term 'of' Term . '|' Term            (rule 10)

	'|'            shift, and enter state 52


State 43

	Term -> '\\' Var ':' Type . '.' Term                (rule 5)

	'.'            shift, and enter state 51


State 44

	Term -> '(' Term Term ')' .                         (rule 4)

	'('            reduce using rule 4
	')'            reduce using rule 4
	'\\'           reduce using rule 4
	'abort'        reduce using rule 4
	'as'           reduce using rule 4
	'case'         reduce using rule 4
	'fst'          reduce using rule 4
	'inl'          reduce using rule 4
	'inr'          reduce using rule 4
	'of'           reduce using rule 4
	'snd'          reduce using rule 4
	'|'            reduce using rule 4
	L_Var          reduce using rule 4
	%eof           reduce using rule 4


State 45

	Type -> '(' Type '->' Type . ')'                    (rule 18)

	')'            shift, and enter state 50


State 46

	Type -> '(' Type '+' Type . ')'                     (rule 19)

	')'            shift, and enter state 49


State 47

	Type -> '(' Type '*' Type . ')'                     (rule 20)

	')'            shift, and enter state 48


State 48

	Type -> '(' Type '*' Type ')' .                     (rule 20)

	'('            reduce using rule 20
	')'            reduce using rule 20
	'*'            reduce using rule 20
	'+'            reduce using rule 20
	'->'           reduce using rule 20
	'.'            reduce using rule 20
	'\\'           reduce using rule 20
	'abort'        reduce using rule 20
	'as'           reduce using rule 20
	'case'         reduce using rule 20
	'fst'          reduce using rule 20
	'inl'          reduce using rule 20
	'inr'          reduce using rule 20
	'of'           reduce using rule 20
	'snd'          reduce using rule 20
	'|'            reduce using rule 20
	L_Var          reduce using rule 20
	%eof           reduce using rule 20


State 49

	Type -> '(' Type '+' Type ')' .                     (rule 19)

	'('            reduce using rule 19
	')'            reduce using rule 19
	'*'            reduce using rule 19
	'+'            reduce using rule 19
	'->'           reduce using rule 19
	'.'            reduce using rule 19
	'\\'           reduce using rule 19
	'abort'        reduce using rule 19
	'as'           reduce using rule 19
	'case'         reduce using rule 19
	'fst'          reduce using rule 19
	'inl'          reduce using rule 19
	'inr'          reduce using rule 19
	'of'           reduce using rule 19
	'snd'          reduce using rule 19
	'|'            reduce using rule 19
	L_Var          reduce using rule 19
	%eof           reduce using rule 19


State 50

	Type -> '(' Type '->' Type ')' .                    (rule 18)

	'('            reduce using rule 18
	')'            reduce using rule 18
	'*'            reduce using rule 18
	'+'            reduce using rule 18
	'->'           reduce using rule 18
	'.'            reduce using rule 18
	'\\'           reduce using rule 18
	'abort'        reduce using rule 18
	'as'           reduce using rule 18
	'case'         reduce using rule 18
	'fst'          reduce using rule 18
	'inl'          reduce using rule 18
	'inr'          reduce using rule 18
	'of'           reduce using rule 18
	'snd'          reduce using rule 18
	'|'            reduce using rule 18
	L_Var          reduce using rule 18
	%eof           reduce using rule 18


State 51

	Term -> '\\' Var ':' Type '.' . Term                (rule 5)

	'('            shift, and enter state 14
	'\\'           shift, and enter state 15
	'abort'        shift, and enter state 16
	'case'         shift, and enter state 17
	'fst'          shift, and enter state 18
	'inl'          shift, and enter state 19
	'inr'          shift, and enter state 20
	'snd'          shift, and enter state 21
	L_Var          shift, and enter state 3

	Var            goto state 12
	Term           goto state 54

State 52

	Term -> 'case' Term 'of' Term '|' . Term            (rule 10)

	'('            shift, and enter state 14
	'\\'           shift, and enter state 15
	'abort'        shift, and enter state 16
	'case'         shift, and enter state 17
	'fst'          shift, and enter state 18
	'inl'          shift, and enter state 19
	'inr'          shift, and enter state 20
	'snd'          shift, and enter state 21
	L_Var          shift, and enter state 3

	Var            goto state 12
	Term           goto state 53

State 53

	Term -> 'case' Term 'of' Term '|' Term .            (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	'\\'           reduce using rule 10
	'abort'        reduce using rule 10
	'as'           reduce using rule 10
	'case'         reduce using rule 10
	'fst'          reduce using rule 10
	'inl'          reduce using rule 10
	'inr'          reduce using rule 10
	'of'           reduce using rule 10
	'snd'          reduce using rule 10
	'|'            reduce using rule 10
	L_Var          reduce using rule 10
	%eof           reduce using rule 10


State 54

	Term -> '\\' Var ':' Type '.' Term .                (rule 5)

	'('            reduce using rule 5
	')'            reduce using rule 5
	'\\'           reduce using rule 5
	'abort'        reduce using rule 5
	'as'           reduce using rule 5
	'case'         reduce using rule 5
	'fst'          reduce using rule 5
	'inl'          reduce using rule 5
	'inr'          reduce using rule 5
	'of'           reduce using rule 5
	'snd'          reduce using rule 5
	'|'            reduce using rule 5
	L_Var          reduce using rule 5
	%eof           reduce using rule 5


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 21
Number of terminals: 24
Number of non-terminals: 5
Number of states: 55
